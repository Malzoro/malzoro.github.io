<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Crackings on uint8_t* blog</title>
    <link>https://blog.i-eat-sponges.ca/cracking/</link>
    <description>Recent content in Crackings on uint8_t* blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 26 Sep 2023 20:12:52 -0400</lastBuildDate><atom:link href="https://blog.i-eat-sponges.ca/cracking/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Flare-On 2021 - Known</title>
      <link>https://blog.i-eat-sponges.ca/cracking/known/</link>
      <pubDate>Tue, 26 Sep 2023 20:12:52 -0400</pubDate>
      
      <guid>https://blog.i-eat-sponges.ca/cracking/known/</guid>
      <description>I really loved this challenge, mainly because it was ransomware and you had to decode the encrypted files to recover the flag.
We are given the following files.
. ├── Files │ ├── capa.png.encrypted │ ├── cicero.txt.encrypted │ ├── commandovm.gif.encrypted │ ├── critical_data.txt.encrypted │ ├── flarevm.jpg.encrypted │ └── latin_alphabet.txt.encrypted └── UnlockYourFiles.exe 2 directories, 7 files Looking at UnlockYourFiles we can see that it&amp;rsquo;s a decryptor for a ransomware, and looking at the Files directory, we can see the encrypted files.</description>
      <content>&lt;p&gt;I really loved this challenge, mainly because it was ransomware and you had to decode the encrypted files to recover the flag.&lt;/p&gt;
&lt;p&gt;We are given the following files.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;.
├── Files
│   ├── capa.png.encrypted
│   ├── cicero.txt.encrypted
│   ├── commandovm.gif.encrypted
│   ├── critical_data.txt.encrypted
│   ├── flarevm.jpg.encrypted
│   └── latin_alphabet.txt.encrypted
└── UnlockYourFiles.exe

2 directories, 7 files
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Looking at UnlockYourFiles we can see that it&amp;rsquo;s a decryptor for a ransomware, and looking at the &lt;code&gt;Files&lt;/code&gt; directory, we can see the encrypted files.&lt;/p&gt;
&lt;p&gt;Running UnlockYourFiles.exe asks us a key to decrypt the files, however we do not want to pay the ransom so we&amp;rsquo;ll see if we can find a way to decrypt our files.&lt;/p&gt;
&lt;p&gt;We can see a base64 encoded string when running UnlockYourFiles, decoding this base64 string reveals the following clue.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(&amp;gt;0_0)&amp;gt; It&amp;#39;s dangerous to add+ror alone! Take this &amp;lt;(0_0&amp;lt;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Analyzing the binary we can see the following logic.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cmp&lt;/span&gt;   cl, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;jge&lt;/span&gt;     &lt;span style=&#34;color:#ae81ff&#34;&gt;0x401216&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;    bl, &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt; [ecx&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;esi]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;    al, &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt; [ecx&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;edi]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt;      al, bl
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rol&lt;/span&gt;       al, cl
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sub&lt;/span&gt;     al, cl
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt; [ecx&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;edi], al
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;inc&lt;/span&gt;      cl
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;jmp&lt;/span&gt;     &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4011fe&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We see the following algorithm &lt;code&gt;rol((al ^ bl), cl) - cl&lt;/code&gt;, so we implement the following python script.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; string
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alphabet &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rotl&lt;/span&gt;(value, shift, bit_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; shift &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; value
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    shift &lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt; bit_size
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ((value &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; shift) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; (value &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; (bit_size &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; shift))) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; ((&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bit_size) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./latin_alphabet.txt.encrypted&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rb&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; file:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;readlines():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        alphabet &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; line
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;reg_alphabet &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ascii_uppercase
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;final &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; alphabet[x]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; rotl((c &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; key), x) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ord(reg_alphabet[x]):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FOUND BYTE ! : &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;hex(i)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            final &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_bytes()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FINAL KEY: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;final&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This python script will use the &lt;code&gt;latin_alphabet.txt.encrypted&lt;/code&gt; file because we can guess the file content.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>EAX ME - MEDIUM/HARD</title>
      <link>https://blog.i-eat-sponges.ca/cracking/eax_me/</link>
      <pubDate>Tue, 26 Sep 2023 19:49:03 -0400</pubDate>
      
      <guid>https://blog.i-eat-sponges.ca/cracking/eax_me/</guid>
      <description>Windows x86 Console application Heavily obfuscated, presumably with author&amp;rsquo;s own tool: https://github.com/DosX-dev/ASM-Guard
Prompt:
EAX-Crackme! Coded by DosX Enter the key: ABCDEFGH No, you are a loser :( That&amp;rsquo;s not very nice. I guess we have to crack it now.
First glance Opening in CFF Explorer, here&amp;rsquo;s the entire recoverable import table, note that these imports are common with packers:
Address	Ordinal	Name	Library 000000000040B03C	LoadLibraryA	KERNEL32 000000000040B040	ExitProcess	KERNEL32 000000000040B044	GetProcAddress	KERNEL32 000000000040B048	VirtualProtect	KERNEL32 000000000040B050	exit msvcrt And here&amp;rsquo;s what we find searching for strings:</description>
      <content>&lt;p&gt;Windows x86 Console application
Heavily obfuscated, presumably with author&amp;rsquo;s own tool:
&lt;a href=&#34;https://github.com/DosX-dev/ASM-Guard&#34;&gt;https://github.com/DosX-dev/ASM-Guard&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Prompt:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;EAX-Crackme! Coded by DosX
Enter the key: ABCDEFGH

 No, you are a loser :(
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That&amp;rsquo;s not very nice.
I guess we have to crack it now.&lt;/p&gt;
&lt;h1 id=&#34;first-glance&#34;&gt;First glance&lt;/h1&gt;
&lt;p&gt;Opening in CFF Explorer, here&amp;rsquo;s the entire recoverable import table, note that these imports are common with packers:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Address	                Ordinal	Name	Library
000000000040B03C		LoadLibraryA	KERNEL32
000000000040B040		ExitProcess	    KERNEL32
000000000040B044		GetProcAddress	KERNEL32
000000000040B048		VirtualProtect	KERNEL32
000000000040B050		exit            msvcrt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And here&amp;rsquo;s what we find searching for strings:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;DOSX:0040612C aByDosxEnterThe db &amp;#39; by DosX&amp;#39;,0Ah
DOSX:0040612C                 db &amp;#39;Enter the key: &amp;#39;,0
DOSX:00406145                 db 25h, 36h, 5Bh
DOSX:00406148                 dd 0DFEC0A5Eh, 255DFFFEh, 0A00632Ah, 0A732520h, 65655900h
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With no xrefs obviously.&lt;/p&gt;
&lt;p&gt;Picking it apart manually is clearly out of the question.&lt;/p&gt;
&lt;h1 id=&#34;finding-the-relevant-code&#34;&gt;Finding the relevant code&lt;/h1&gt;
&lt;p&gt;Let&amp;rsquo;s start simple with API call logging with api_log so we can see what it&amp;rsquo;s actually importing and using, and to figure out how the input/output is being performed.&lt;/p&gt;
&lt;p&gt;We see some interesting things happening in the log file when searching for returns to user code:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;...
Line 2693: C:\Windows\SysWOW64\msvcrt.dll!printf returns to 401015
Line 2765: C:\Windows\SysWOW64\msvcrt.dll!scanf returns to 401027
Line 2813: C:\Windows\SysWOW64\msvcrt.dll!strlen returns to 401033
Line 2814: C:\Windows\SysWOW64\msvcrt.dll!printf returns to 4010da
Line 2842: C:\Windows\SysWOW64\msvcrt.dll!_getch returns to 4010e2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If we attach to the process while it&amp;rsquo;s running with x32dbg and go to address 401027, we can find the following verification logic:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;00401022    call &amp;lt;JMP.&amp;amp;scanf&amp;gt;
00401027    add esp,8
0040102A    lea eax,dword ptr ss:[ebp-1]
0040102D    push eax
0040102E    call &amp;lt;JMP.&amp;amp;strlen&amp;gt;
00401033    add esp,4
00401036    cmp eax,6
00401039    jne eax.4010AD
0040103F    lea eax,dword ptr ss:[ebp-1]
00401042    add eax,3
00401045    movsx ecx,byte ptr ds:[eax]
00401048    cmp ecx,61						; &amp;#39;a&amp;#39;
0040104B    jne eax.4010AD
00401051    lea eax,dword ptr ss:[ebp-1]
00401054    add eax,1
00401057    movsx ecx,byte ptr ds:[eax]
0040105A    cmp ecx,3C						; &amp;#39;&amp;lt;&amp;#39;
0040105D    jne eax.4010AD
00401063    movsx eax,byte ptr ss:[ebp-1]
00401067    cmp eax,49						; &amp;#39;I&amp;#39;
0040106A    jne eax.4010AD
00401070    lea eax,dword ptr ss:[ebp-1]
00401073    add eax,4
00401076    movsx ecx,byte ptr ds:[eax]
00401079    cmp ecx,73						; &amp;#39;s&amp;#39;
0040107C    jne eax.4010AD
00401082    lea eax,dword ptr ss:[ebp-1]
00401085    add eax,5
00401088    movsx ecx,byte ptr ds:[eax]
0040108B    cmp ecx,6D						; &amp;#39;m&amp;#39;
0040108E    jne eax.4010AD
00401094    lea eax,dword ptr ss:[ebp-1]
00401097    add eax,2
0040109A    movsx ecx,byte ptr ds:[eax]
0040109D    cmp ecx,33						; &amp;#39;3&amp;#39;
004010A0    jne eax.4010AD
004010A6    mov eax,1
004010AB    jmp eax.4010B2
004010AD    mov eax,0
004010B2    test eax,eax
004010B4    je eax.4010BF
004010BA    jmp eax.4010C9
004010BF    mov eax,eax.402056        402056:&amp;#34;No, you are a loser :(&amp;#34;
004010C4    jmp eax.4010CE
004010C9    mov eax,eax.40203B        40203B:&amp;#34;Yees! You are the best! :)&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The characters are verified out of order.&lt;/p&gt;
&lt;p&gt;The quickest way to get the correct order is just to enter &amp;lsquo;123456&amp;rsquo; as the password and step through to see which number is compared to which value.&lt;/p&gt;
&lt;p&gt;Putting them all in order we get &amp;lsquo;I&amp;lt;3asm&amp;rsquo;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;EAX-Crackme! Coded by DosX
Enter the key: I&amp;lt;3asm

 Yees! You are the best! :)
&lt;/code&gt;&lt;/pre&gt;</content>
    </item>
    
    <item>
      <title>Discord Cracking Challenge (easy)</title>
      <link>https://blog.i-eat-sponges.ca/cracking/discord1/</link>
      <pubDate>Sun, 24 Sep 2023 18:19:45 -0400</pubDate>
      
      <guid>https://blog.i-eat-sponges.ca/cracking/discord1/</guid>
      <description>This binary came from a discord server, I won&amp;rsquo;t mention which exactly, so this won&amp;rsquo;t be indexed.
The binary was really easy, we see a while loop and the xor key \xda\xd0\x23\x73.
I solved the challenge using binary ninja python api, took me about 10 seconds.
&amp;gt;&amp;gt;&amp;gt; output = bv.read(0x140009000, 0x20) &amp;gt;&amp;gt;&amp;gt; xor = Transform[&amp;#39;XOR&amp;#39;] &amp;gt;&amp;gt;&amp;gt; xor.decode(output, {&amp;#39;key&amp;#39; : b&amp;#39;\xda\xd0\x23\x73&amp;#39;}) b&amp;#39;FLAG{ReversE_EngineerinG_IS_FuN}&amp;#39; </description>
      <content>&lt;p&gt;This binary came from a discord server, I won&amp;rsquo;t mention which exactly, so this won&amp;rsquo;t be indexed.&lt;/p&gt;
&lt;p&gt;The binary was really easy, we see a while loop and the xor key &lt;code&gt;\xda\xd0\x23\x73&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I solved the challenge using binary ninja python api, took me about 10 seconds.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bv&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x140009000&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; xor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Transform[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;XOR&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; xor&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(output, {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;key&amp;#39;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xda\xd0\x23\x73&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;FLAG&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{ReversE_EngineerinG_IS_FuN}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>Hexagon</title>
      <link>https://blog.i-eat-sponges.ca/cracking/hexagon/</link>
      <pubDate>Sat, 23 Sep 2023 16:26:10 -0400</pubDate>
      
      <guid>https://blog.i-eat-sponges.ca/cracking/hexagon/</guid>
      <description>Super easy reverse-engineering challenge, very good intro to reversing C++ binaries.
You&amp;rsquo;ll learn how std::cout, std::cin works at a lower level.
For example it&amp;rsquo;s the first time i notice that std::cout and std::cin are stored in the .bss segment.
As you can see the challenge is relatively easy, we&amp;rsquo;re checking that the input is between 7 and 11 bytes. Next we&amp;rsquo;re doing the following checks.
byte 0 needs to be J (R - 0x8) byte 2 needs to be 0 byte 4 needs to be - byte 3 and 7 needs to be equal If we match all these conditions then we won the challenge, we can come up with the answer.</description>
      <content>&lt;p&gt;Super easy reverse-engineering challenge, very good intro to reversing C++ binaries.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll learn how &lt;code&gt;std::cout&lt;/code&gt;, &lt;code&gt;std::cin&lt;/code&gt; works at a lower level.&lt;/p&gt;
&lt;p&gt;For example it&amp;rsquo;s the first time i notice that &lt;code&gt;std::cout&lt;/code&gt; and &lt;code&gt;std::cin&lt;/code&gt; are stored in the &lt;code&gt;.bss&lt;/code&gt; segment.&lt;/p&gt;

&lt;img src=&#34;https://blog.i-eat-sponges.ca/code.png&#34;  alt=&#34;Hello Friend&#34;  class=&#34;center&#34;    /&gt;


&lt;p&gt;As you can see the challenge is relatively easy, we&amp;rsquo;re checking that the input is between 7 and 11 bytes. Next we&amp;rsquo;re doing the following checks.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;byte 0 needs to be J (R - 0x8)&lt;/li&gt;
&lt;li&gt;byte 2 needs to be 0&lt;/li&gt;
&lt;li&gt;byte 4 needs to be -&lt;/li&gt;
&lt;li&gt;byte 3 and 7 needs to be equal&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we match all these conditions then we won the challenge, we can come up with the answer.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;JA0A-AAA
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Testing this key, we successfully win the challenge.&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
