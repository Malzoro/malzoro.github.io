<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cracking on uint8_t* blog</title>
    <link>https://blog.i-eat-sponges.ca/tags/cracking/</link>
    <description>Recent content in cracking on uint8_t* blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 24 Sep 2023 18:19:45 -0400</lastBuildDate><atom:link href="https://blog.i-eat-sponges.ca/tags/cracking/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Discord Cracking Challenge (easy)</title>
      <link>https://blog.i-eat-sponges.ca/cracking/discord1/</link>
      <pubDate>Sun, 24 Sep 2023 18:19:45 -0400</pubDate>
      
      <guid>https://blog.i-eat-sponges.ca/cracking/discord1/</guid>
      <description>This binary came from a discord server, I won&amp;rsquo;t mention which exactly, so this won&amp;rsquo;t be indexed.
The binary was really easy, we see a while loop and the xor key \xda\xd0\x23\x73.
I solved the challenge using binary ninja python api, took me about 10 seconds.
&amp;gt;&amp;gt;&amp;gt; output = bv.read(0x140009000, 0x20) &amp;gt;&amp;gt;&amp;gt; xor = Transform[&amp;#39;XOR&amp;#39;] &amp;gt;&amp;gt;&amp;gt; xor.decode(output, {&amp;#39;key&amp;#39; : b&amp;#39;\xda\xd0\x23\x73&amp;#39;}) b&amp;#39;FLAG{ReversE_EngineerinG_IS_FuN}&amp;#39; </description>
      <content>&lt;p&gt;This binary came from a discord server, I won&amp;rsquo;t mention which exactly, so this won&amp;rsquo;t be indexed.&lt;/p&gt;
&lt;p&gt;The binary was really easy, we see a while loop and the xor key &lt;code&gt;\xda\xd0\x23\x73&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I solved the challenge using binary ninja python api, took me about 10 seconds.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bv&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x140009000&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; xor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Transform[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;XOR&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; xor&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(output, {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;key&amp;#39;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xda\xd0\x23\x73&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;FLAG&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{ReversE_EngineerinG_IS_FuN}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>Hexagon</title>
      <link>https://blog.i-eat-sponges.ca/cracking/hexagon/</link>
      <pubDate>Sat, 23 Sep 2023 16:26:10 -0400</pubDate>
      
      <guid>https://blog.i-eat-sponges.ca/cracking/hexagon/</guid>
      <description>Super easy reverse-engineering challenge, very good intro to reversing C++ binaries.
You&amp;rsquo;ll learn how std::cout, std::cin works at a lower level.
For example it&amp;rsquo;s the first time i notice that std::cout and std::cin are stored in the .bss segment.
As you can see the challenge is relatively easy, we&amp;rsquo;re checking that the input is between 7 and 11 bytes. Next we&amp;rsquo;re doing the following checks.
byte 0 needs to be J (R - 0x8) byte 2 needs to be 0 byte 4 needs to be - byte 3 and 7 needs to be equal If we match all these conditions then we won the challenge, we can come up with the answer.</description>
      <content>&lt;p&gt;Super easy reverse-engineering challenge, very good intro to reversing C++ binaries.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll learn how &lt;code&gt;std::cout&lt;/code&gt;, &lt;code&gt;std::cin&lt;/code&gt; works at a lower level.&lt;/p&gt;
&lt;p&gt;For example it&amp;rsquo;s the first time i notice that &lt;code&gt;std::cout&lt;/code&gt; and &lt;code&gt;std::cin&lt;/code&gt; are stored in the &lt;code&gt;.bss&lt;/code&gt; segment.&lt;/p&gt;

&lt;img src=&#34;https://blog.i-eat-sponges.ca/code.png&#34;  alt=&#34;Hello Friend&#34;  class=&#34;center&#34;    /&gt;


&lt;p&gt;As you can see the challenge is relatively easy, we&amp;rsquo;re checking that the input is between 7 and 11 bytes. Next we&amp;rsquo;re doing the following checks.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;byte 0 needs to be J (R - 0x8)&lt;/li&gt;
&lt;li&gt;byte 2 needs to be 0&lt;/li&gt;
&lt;li&gt;byte 4 needs to be -&lt;/li&gt;
&lt;li&gt;byte 3 and 7 needs to be equal&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we match all these conditions then we won the challenge, we can come up with the answer.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;JA0A-AAA
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Testing this key, we successfully win the challenge.&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
